
C:\Users\varad_ahirwadkar\Desktop\Terraform\Demo 1>terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/local...
- Installing hashicorp/local v2.1.0...
- Installed hashicorp/local v2.1.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

-------------------------------------------------------------------------------------------------------------------

C:\Users\varad_ahirwadkar\Desktop\Terraform\Demo 1>terraform fmt
local_file_demo.tf
-------------------------------------------------------------------------------------------------------------------

C:\Users\varad_ahirwadkar\Desktop\Terraform\Demo 1>terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # local_file.pet will be created
  + resource "local_file" "pet" {
      + content              = "Dogs,cats are pet! "      + directory_permission = "0777"
      + file_permission      = "0700"
      + filename             = "pets.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if
you run "terraform apply" now.

-------------------------------------------------------------------------------------------------------------------

C:\Users\varad_ahirwadkar\Desktop\Terraform\Demo 1>terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # local_file.pet will be created
  + resource "local_file" "pet" {
      + content              = "Dogs,cats are pet! "
      + directory_permission = "0777"
      + file_permission      = "0700"
      + filename             = "pets.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.pet: Creating...
local_file.pet: Creation complete after 0s [id=3860fcf56ec066b92b5c2959b03c789dc9b47e74]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.


-------------------------------------------------------------------------------------------------------------------
Updating file permissions
-------------------------------------------------------------------------------------------------------------------

C:\Users\varad_ahirwadkar\Desktop\Terraform\Demo 1>terraform show
# local_file.pet:
resource "local_file" "pet" {
    content              = "Dogs,cats are pet! "
    directory_permission = "0777"
    file_permission      = "0700"
    filename             = "pets.txt"
    id                   = "3860fcf56ec066b92b5c2959b03c789dc9b47e74"
}

-------------------------------------------------------------------------------------------------------------------

C:\Users\varad_ahirwadkar\Desktop\Terraform\Demo 1>terraform plan
Acquiring state lock. This may take a few moments...
local_file.pet: Refreshing state... [id=3860fcf56ec066b92b5c2959b03c789dc9b47e74]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.pet must be replaced
-/+ resource "local_file" "pet" {
      ~ file_permission      = "0700" -> "0770" # forces replacement
      ~ id                   = "3860fcf56ec066b92b5c2959b03c789dc9b47e74" -> (known after apply)
        # (3 unchanged attributes hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

-------------------------------------------------------------------------------------------------------------------

C:\Users\varad_ahirwadkar\Desktop\Terraform\Demo 1>terraform apply
local_file.pet: Refreshing state... [id=3860fcf56ec066b92b5c2959b03c789dc9b47e74]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.pet must be replaced
-/+ resource "local_file" "pet" {
      ~ file_permission      = "0700" -> "0770" # forces replacement
      ~ id                   = "3860fcf56ec066b92b5c2959b03c789dc9b47e74" -> (known after apply)
        # (3 unchanged attributes hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.pet: Destroying... [id=3860fcf56ec066b92b5c2959b03c789dc9b47e74]
local_file.pet: Destruction complete after 0s
local_file.pet: Creating...
local_file.pet: Creation complete after 0s [id=3860fcf56ec066b92b5c2959b03c789dc9b47e74]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.

-------------------------------------------------------------------------------------------------------------------

C:\Users\varad_ahirwadkar\Desktop\Terraform\Demo 1>terraform show
# local_file.pet:
resource "local_file" "pet" {
    content              = "Dogs,cats are pet! "
    directory_permission = "0777"
    file_permission      = "0770"
    filename             = "pets.txt"
    id                   = "3860fcf56ec066b92b5c2959b03c789dc9b47e74"
}

-------------------------------------------------------------------------------------------------------------------

C:\Users\varad_ahirwadkar\Desktop\Terraform\Demo 1>terraform destroy
local_file.pet: Refreshing state... [id=3860fcf56ec066b92b5c2959b03c789dc9b47e74]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # local_file.pet will be destroyed
  - resource "local_file" "pet" {
      - content              = "Dogs,cats are pet! " -> null
      - directory_permission = "0777" -> null
      - file_permission      = "0770" -> null
      - filename             = "pets.txt" -> null
      - id                   = "3860fcf56ec066b92b5c2959b03c789dc9b47e74" -> null
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

local_file.pet: Destroying... [id=3860fcf56ec066b92b5c2959b03c789dc9b47e74]
local_file.pet: Destruction complete after 0s

Destroy complete! Resources: 1 destroyed.
