
C:\Users\Varad\Desktop\terraform>terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of kreuzwerker/docker from the dependency lock file
- Reusing previous version of hashicorp/random from the dependency lock file
- Using previously-installed kreuzwerker/docker v2.12.2
- Using previously-installed hashicorp/random v3.1.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

C:\Users\Varad\Desktop\terraform>terraform plan
var.volume_name
  Enter a value: shared_volume


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.ubuntu_tf will be created
  + resource "docker_container" "ubuntu_tf" {
      + attach           = false
      + bridge           = (known after apply)
      + command          = [
          + "tail",
          + "-f",
          + "/dev/null",
        ]
      + container_logs   = (known after apply)
      + entrypoint       = (known after apply)
      + env              = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + hostname         = (known after apply)
      + id               = (known after apply)
      + image            = (known after apply)
      + init             = (known after apply)
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + ipc_mode         = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = (known after apply)
      + network_data     = (known after apply)
      + networks         = (known after apply)
      + read_only        = false
      + remove_volumes   = true
      + restart          = "no"
      + rm               = false
      + security_opts    = (known after apply)
      + shm_size         = (known after apply)
      + start            = true
      + stdin_open       = false
      + tty              = false

      + healthcheck {
          + interval     = (known after apply)
          + retries      = (known after apply)
          + start_period = (known after apply)
          + test         = (known after apply)
          + timeout      = (known after apply)
        }

      + labels {
          + label = (known after apply)
          + value = (known after apply)
        }

      + mounts {
          + source = "varad-shared_volume"
          + target = "/mount/test"
          + type   = "volume"
        }

      + ports {
          + external = 25678
          + internal = 8080
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.ubuntu will be created
  + resource "docker_image" "ubuntu" {
      + id     = (known after apply)
      + latest = (known after apply)
      + name   = "ubuntu:latest"
      + output = (known after apply)
    }

  # docker_network.my_net will be created
  + resource "docker_network" "my_net" {
      + driver      = (known after apply)
      + id          = (known after apply)
      + internal    = (known after apply)
      + ipam_driver = "default"
      + name        = "my_network"
      + options     = (known after apply)
      + scope       = (known after apply)

      + ipam_config {
          + aux_address = (known after apply)
          + gateway     = (known after apply)
          + ip_range    = (known after apply)
          + subnet      = (known after apply)
        }
    }

  # docker_volume.shared_volume will be created
  + resource "docker_volume" "shared_volume" {
      + driver     = (known after apply)
      + id         = (known after apply)
      + mountpoint = (known after apply)
      + name       = "varad-shared_volume"
    }

  # random_id.id will be created
  + resource "random_id" "id" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 2
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + ip_addr = (known after apply)
╷
│ Warning: Attribute is deprecated
│
│   with docker_container.ubuntu_tf,
│   on docker_demo.tf line 31, in resource "docker_container" "ubuntu_tf":
│   31:   networks = [docker_network.my_net.id]
│
│ Use networks_advanced instead. Will be removed in v3.0.0
│
│ (and one more similar warning elsewhere)
╵

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if
you run "terraform apply" now.

C:\Users\Varad\Desktop\terraform>terraform apply
var.volume_name
  Enter a value: shared_volume


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # docker_container.ubuntu_tf will be created
  + resource "docker_container" "ubuntu_tf" {
      + attach           = false
      + bridge           = (known after apply)
      + command          = [
          + "tail",
          + "-f",
          + "/dev/null",
        ]
      + container_logs   = (known after apply)
      + entrypoint       = (known after apply)
      + env              = (known after apply)
      + exit_code        = (known after apply)
      + gateway          = (known after apply)
      + hostname         = (known after apply)
      + id               = (known after apply)
      + image            = (known after apply)
      + init             = (known after apply)
      + ip_address       = (known after apply)
      + ip_prefix_length = (known after apply)
      + ipc_mode         = (known after apply)
      + log_driver       = "json-file"
      + logs             = false
      + must_run         = true
      + name             = (known after apply)
      + network_data     = (known after apply)
      + networks         = (known after apply)
      + read_only        = false
      + remove_volumes   = true
      + restart          = "no"
      + rm               = false
      + security_opts    = (known after apply)
      + shm_size         = (known after apply)
      + start            = true
      + stdin_open       = false
      + tty              = false

      + healthcheck {
          + interval     = (known after apply)
          + retries      = (known after apply)
          + start_period = (known after apply)
          + test         = (known after apply)
          + timeout      = (known after apply)
        }

      + labels {
          + label = (known after apply)
          + value = (known after apply)
        }

      + mounts {
          + source = "varad-shared_volume"
          + target = "/mount/test"
          + type   = "volume"
        }

      + ports {
          + external = 25678
          + internal = 8080
          + ip       = "0.0.0.0"
          + protocol = "tcp"
        }
    }

  # docker_image.ubuntu will be created
  + resource "docker_image" "ubuntu" {
      + id     = (known after apply)
      + latest = (known after apply)
      + name   = "ubuntu:latest"
      + output = (known after apply)
    }

  # docker_network.my_net will be created
  + resource "docker_network" "my_net" {
      + driver      = (known after apply)
      + id          = (known after apply)
      + internal    = (known after apply)
      + ipam_driver = "default"
      + name        = "my_network"
      + options     = (known after apply)
      + scope       = (known after apply)

      + ipam_config {
          + aux_address = (known after apply)
          + gateway     = (known after apply)
          + ip_range    = (known after apply)
          + subnet      = (known after apply)
        }
    }

  # docker_volume.shared_volume will be created
  + resource "docker_volume" "shared_volume" {
      + driver     = (known after apply)
      + id         = (known after apply)
      + mountpoint = (known after apply)
      + name       = "varad-shared_volume"
    }

  # random_id.id will be created
  + resource "random_id" "id" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 2
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + ip_addr = (known after apply)
╷
│ Warning: Attribute is deprecated
│
│   with docker_container.ubuntu_tf,
│   on docker_demo.tf line 31, in resource "docker_container" "ubuntu_tf":
│   31:   networks = [docker_network.my_net.id]
│
│ Use networks_advanced instead. Will be removed in v3.0.0
│
│ (and one more similar warning elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

random_id.id: Creating...
random_id.id: Creation complete after 0s [id=Dsk]
docker_volume.shared_volume: Creating...
docker_image.ubuntu: Creating...
docker_network.my_net: Creating...
docker_volume.shared_volume: Creation complete after 1s [id=varad-shared_volume]
docker_network.my_net: Creation complete after 3s [id=83c61168de8f00a4e3e750b6f34bbc74f76e04263206e2730e155bb1b105c433]
docker_image.ubuntu: Still creating... [10s elapsed]
docker_image.ubuntu: Still creating... [21s elapsed]
docker_image.ubuntu: Creation complete after 29s [id=sha256:9873176a8ff5ac192ce4d7df8a403787558b9f3981a4c4d74afb3edceeda451cubuntu:latest]
docker_container.ubuntu_tf: Creating...
docker_container.ubuntu_tf: Creation complete after 10s [id=93e71e325b6c65a318b5a5cc938853a097238ecaf369472e92061e9c4d373a35]
╷
│ Warning: Deprecated Attribute
│
│   with docker_container.ubuntu_tf,
│   on docker_demo.tf line 31, in resource "docker_container" "ubuntu_tf":
│   31:   networks = [docker_network.my_net.id]
│
│ Use networks_advanced instead. Will be removed in v3.0.0
╵

Apply complete! Resources: 5 added, 0 changed, 0 destroyed.

Outputs:

ip_addr = "172.21.0.2"

C:\Users\Varad\Desktop\terraform>terraform show
# docker_container.ubuntu_tf:
resource "docker_container" "ubuntu_tf" {
    attach            = false
    command           = [
        "tail",
        "-f",
        "/dev/null",
    ]
    cpu_shares        = 0
    entrypoint        = []
    env               = []
    gateway           = "172.21.0.1"
    hostname          = "93e71e325b6c"
    id                = "93e71e325b6c65a318b5a5cc938853a097238ecaf369472e92061e9c4d373a35"
    image             = "sha256:9873176a8ff5ac192ce4d7df8a403787558b9f3981a4c4d74afb3edceeda451c"
    init              = false
    ip_address        = "172.21.0.2"
    ip_prefix_length  = 16
    ipc_mode          = "private"
    log_driver        = "json-file"
    logs              = false
    max_retry_count   = 0
    memory            = 0
    memory_swap       = 0
    must_run          = true
    name              = "TF_Ubuntu-0ec9"
    network_data      = [
        {
            gateway                   = "172.21.0.1"
            global_ipv6_address       = ""
            global_ipv6_prefix_length = 0
            ip_address                = "172.21.0.2"
            ip_prefix_length          = 16
            ipv6_gateway              = ""
            network_name              = "my_network"
        },
    ]
    network_mode      = "default"
    networks          = [
        "83c61168de8f00a4e3e750b6f34bbc74f76e04263206e2730e155bb1b105c433",
    ]
    privileged        = false
    publish_all_ports = false
    read_only         = false
    remove_volumes    = true
    restart           = "no"
    rm                = false
    security_opts     = []
    shm_size          = 64
    start             = true
    stdin_open        = false
    tty               = false

    mounts {
        source = "varad-shared_volume"
        target = "/mount/test"
        type   = "volume"
    }

    ports {
        external = 25678
        internal = 8080
        ip       = "0.0.0.0"
        protocol = "tcp"
    }
}

# docker_image.ubuntu:
resource "docker_image" "ubuntu" {
    id     = "sha256:9873176a8ff5ac192ce4d7df8a403787558b9f3981a4c4d74afb3edceeda451cubuntu:latest"
    latest = "sha256:9873176a8ff5ac192ce4d7df8a403787558b9f3981a4c4d74afb3edceeda451c"
    name   = "ubuntu:latest"
}

# docker_network.my_net:
resource "docker_network" "my_net" {
    attachable  = false
    driver      = "bridge"
    id          = "83c61168de8f00a4e3e750b6f34bbc74f76e04263206e2730e155bb1b105c433"
    ingress     = false
    internal    = false
    ipam_driver = "default"
    ipv6        = false
    name        = "my_network"
    options     = {}
    scope       = "local"

    ipam_config {
        aux_address = {}
        gateway     = "172.21.0.1"
        subnet      = "172.21.0.0/16"
    }
}

# docker_volume.shared_volume:
resource "docker_volume" "shared_volume" {
    driver     = "local"
    id         = "varad-shared_volume"
    mountpoint = "/var/lib/docker/volumes/varad-shared_volume/_data"
    name       = "varad-shared_volume"
}

# random_id.id:
resource "random_id" "id" {
    b64_std     = "Dsk="
    b64_url     = "Dsk"
    byte_length = 2
    dec         = "3785"
    hex         = "0ec9"
    id          = "Dsk"
}


Outputs:

ip_addr = "172.21.0.2"
